package com.example.lynnyuki.cloudfunny.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lynnyuki.cloudfunny.model.bean.ImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_BEAN".
*/
public class ImageBeanDao extends AbstractDao<ImageBean, Long> {

    public static final String TABLENAME = "IMAGE_BEAN";

    /**
     * Properties of entity ImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Create_at = new Property(2, String.class, "create_at", false, "CREATE_AT");
        public final static Property Width = new Property(3, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(4, int.class, "height", false, "HEIGHT");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
    }


    public ImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CREATE_AT\" TEXT," + // 2: create_at
                "\"WIDTH\" INTEGER NOT NULL ," + // 3: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 4: height
                "\"URL\" TEXT);"); // 5: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(3, create_at);
        }
        stmt.bindLong(4, entity.getWidth());
        stmt.bindLong(5, entity.getHeight());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(3, create_at);
        }
        stmt.bindLong(4, entity.getWidth());
        stmt.bindLong(5, entity.getHeight());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ImageBean readEntity(Cursor cursor, int offset) {
        ImageBean entity = new ImageBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // create_at
            cursor.getInt(offset + 3), // width
            cursor.getInt(offset + 4), // height
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreate_at(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWidth(cursor.getInt(offset + 3));
        entity.setHeight(cursor.getInt(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
